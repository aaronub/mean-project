{"ast":null,"code":"import { HouseAction } from 'src/app/store/house/house.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport class HouseService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n    this.url = 'http://localhost:3000/user/';\n  }\n  getHouses() {\n    this.http.get(this.url + 'houses').subscribe({\n      next: res => {\n        const houses = res.houses;\n        console.log(houses);\n        this.store.dispatch(HouseAction.getHouses({\n          houses\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n  getHouse(id) {\n    this.http.get(this.url + 'house/' + id);\n  }\n  addHouse(house) {\n    this.http.post(this.url + 'house', house).subscribe({\n      next: res => {\n        const house = res.house;\n        this.store.dispatch(HouseAction.addHouse({\n          house\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n  updateHouse(requestBody) {\n    this.http.put(this.url + 'house', requestBody).subscribe({\n      next: res => {\n        const house = res.house;\n        console.log(house);\n        this.store.dispatch(HouseAction.updateHouse({\n          house\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n  deleteHouse(id) {\n    this.http.delete(this.url + 'house/' + id).subscribe({\n      next: res => {\n        const id = res.house._id;\n        this.store.dispatch(HouseAction.deleteHouse({\n          id\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n}\nHouseService.ɵfac = function HouseService_Factory(t) {\n  return new (t || HouseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n};\nHouseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HouseService,\n  factory: HouseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,kCAAkC;;;;AAK9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAUC,KAAY;IAAtC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IAF3C,QAAG,GAAG,6BAA6B;EAEmB;EAE9DC,SAAS;IACP,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,QAAQ,CAAC,CAC/BC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMC,MAAM,GAAUD,GAAG,CAACC,MAAM;QAChCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB,IAAI,CAACP,KAAK,CAACU,QAAQ,CAACd,WAAW,CAACK,SAAS,CAAC;UAAEM;QAAM,CAAE,CAAC,CAAC;MACxD,CAAC;MACDI,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;EAEAC,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,QAAQ,GAAGa,EAAE,CAAC;EACzC;EAEAC,QAAQ,CAACC,KAAY;IACnB,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAC,IAAI,CAAChB,GAAG,GAAG,OAAO,EAAEe,KAAK,CAAC,CACtCd,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMY,KAAK,GAAGZ,GAAG,CAACY,KAAK;QACvB,IAAI,CAAClB,KAAK,CAACU,QAAQ,CAACd,WAAW,CAACqB,QAAQ,CAAC;UAAEC;QAAK,CAAE,CAAC,CAAC;MACtD,CAAC;MACDP,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;EAEAM,WAAW,CAACC,WAAgB;IAC1B,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACnB,GAAG,GAAG,OAAO,EAAEkB,WAAW,CAAC,CAC3CjB,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMY,KAAK,GAAGZ,GAAG,CAACY,KAAK;QACvBV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;QAClB,IAAI,CAAClB,KAAK,CAACU,QAAQ,CAACd,WAAW,CAACwB,WAAW,CAAC;UAAEF;QAAK,CAAE,CAAC,CAAC;MACzD,CAAC;MACDP,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;EAEAS,WAAW,CAACP,EAAU;IACpB,IAAI,CAACjB,IAAI,CAACyB,MAAM,CAAC,IAAI,CAACrB,GAAG,GAAG,QAAQ,GAAGa,EAAE,CAAC,CACvCZ,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMU,EAAE,GAAGV,GAAG,CAACY,KAAK,CAACO,GAAG;QACxB,IAAI,CAACzB,KAAK,CAACU,QAAQ,CAACd,WAAW,CAAC2B,WAAW,CAAC;UAAEP;QAAE,CAAE,CAAC,CAAC;MACtD,CAAC;MACDL,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;;AA7DWjB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAFX;AAAM","names":["HouseAction","HouseService","constructor","http","store","getHouses","get","url","subscribe","next","res","houses","console","log","dispatch","error","e","alert","message","getHouse","id","addHouse","house","post","updateHouse","requestBody","put","deleteHouse","delete","_id","factory","providedIn"],"sourceRoot":"","sources":["D:\\doc_vs\\mean-project\\client\\src\\app\\services\\house\\house.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { House } from 'src/app/interfaces/house';\r\nimport { HouseAction } from 'src/app/store/house/house.action';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HouseService {\r\n  private url = 'http://localhost:3000/user/';\r\n\r\n  constructor(private http: HttpClient, private store: Store) { }\r\n\r\n  getHouses(): void {\r\n    this.http.get(this.url + 'houses')\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const houses: any[] = res.houses;\r\n          console.log(houses);\r\n          this.store.dispatch(HouseAction.getHouses({ houses }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      })\r\n  }\r\n\r\n  getHouse(id: string): void {\r\n    this.http.get(this.url + 'house/' + id);\r\n  }\r\n\r\n  addHouse(house: House): void {\r\n    this.http.post(this.url + 'house', house)\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const house = res.house;\r\n          this.store.dispatch(HouseAction.addHouse({ house }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      })\r\n  }\r\n\r\n  updateHouse(requestBody: any): void {\r\n    this.http.put(this.url + 'house', requestBody)\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const house = res.house;\r\n          console.log(house);\r\n          this.store.dispatch(HouseAction.updateHouse({ house }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      })\r\n  }\r\n\r\n  deleteHouse(id: string): void {\r\n    this.http.delete(this.url + 'house/' + id)\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const id = res.house._id;\r\n          this.store.dispatch(HouseAction.deleteHouse({ id }))\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}