{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/snack-bar\";\nexport class RegisterComponent {\n  constructor(route, router, formBuilder, http, _snackBar) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this._snackBar = _snackBar;\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.registerToken = params['token'];\n    });\n  }\n  register() {\n    console.log(this.registerForm.getRawValue());\n    const requestBody = this.registerForm.getRawValue();\n    let token = '';\n    if (this.registerToken) {\n      token = `jwt ${this.registerToken}`;\n    }\n    this.http.post('http://localhost:3000/user/register', requestBody, {\n      headers: {\n        'authorization': token\n      }\n    }).subscribe({\n      next: data => {\n        this.router.navigate(['login']);\n      },\n      error: error => {\n        this._snackBar.open('Error', error.error.message, {\n          duration: 3000\n        });\n      },\n      complete: () => {}\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 16,\n  vars: 1,\n  consts: [[1, \"register-input-container\"], [3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\")(3, \"mat-label\");\n      i0.ɵɵtext(4, \"username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\")(7, \"mat-label\");\n      i0.ɵɵtext(8, \"email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\")(11, \"mat-label\");\n      i0.ɵɵtext(12, \"password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_14_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵtext(15, \"Register\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n    }\n  },\n  styles: [\".register-input-container[_ngcontent-%COMP%]{\\r\\n    border: 1px black solid;\\r\\n    border-radius: 10%;\\r\\n    padding: 25px;\\r\\n    margin-top: 200px;\\r\\n    margin-right: auto;\\r\\n    margin-left: auto;\\r\\n    width: 25%;\\r\\n}\\r\\n\\r\\n.mat-mdc-form-field[_ngcontent-%COMP%] {\\r\\n    display: block;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGNBQWM7QUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyIucmVnaXN0ZXItaW5wdXQtY29udGFpbmVye1xyXG4gICAgYm9yZGVyOiAxcHggYmxhY2sgc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMCU7XHJcbiAgICBwYWRkaW5nOiAyNXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAgIHdpZHRoOiAyNSU7XHJcbn1cclxuXHJcbi5tYXQtbWRjLWZvcm0tZmllbGQge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;AASnE,OAAM,MAAOC,iBAAiB;EAQ5BC,YACUC,KAAsB,EACtBC,MAAe,EACfC,WAAyB,EACzBC,IAAiB,EACjBC,SAAuB;IAJvB,UAAK,GAALJ,KAAK;IACL,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,SAAI,GAAJC,IAAI;IACJ,cAAS,GAATC,SAAS;IAXnB,iBAAY,GAAe,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAChDC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MAChCE,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ;KACnC,CAAC;EAQG;EAELG,QAAQ;IACN,IAAI,CAACV,KAAK,CAACW,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACxC,IAAI,CAACC,aAAa,GAAGD,MAAM,CAAC,OAAO,CAAC;IACtC,CAAC,CAAC;EACJ;EAEAE,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,YAAY,CAACC,WAAW,EAAE,CAAC;IAC5C,MAAMC,WAAW,GAAG,IAAI,CAACF,YAAY,CAACC,WAAW,EAAE;IACnD,IAAIE,KAAK,GAAG,EAAE;IACd,IAAI,IAAI,CAACP,aAAa,EAAC;MACrBO,KAAK,GAAG,OAAO,IAAI,CAACP,aAAa,EAAE;;IAErC,IAAI,CAACX,IAAI,CAACmB,IAAI,CAAC,qCAAqC,EAAEF,WAAW,EAAE;MACjEG,OAAO,EAAG;QAAC,eAAe,EAAGF;MAAK;KACnC,CAAC,CAACT,SAAS,CAAC;MACXY,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACxB,MAAM,CAACyB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACvB,SAAS,CAACwB,IAAI,CAAC,OAAO,EAAED,KAAK,CAACA,KAAK,CAACE,OAAO,EAAE;UAChDC,QAAQ,EAAE;SACX,CAAC;MACJ,CAAC;MACDC,QAAQ,EAAE,MAAK,CAAE;KAClB,CAAC;EACJ;;AA1CWjC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAkC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX9BC,8BAAsC;MAGfA,wBAAQ;MAAAA,iBAAY;MAC/BA,2BAA2C;MAC/CA,iBAAiB;MAEjBA,sCAAgB;MACDA,qBAAK;MAAAA,iBAAY;MAC5BA,2BAAwC;MAC5CA,iBAAiB;MAEjBA,uCAAgB;MACDA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA2C;MAC/CA,iBAAiB;MAGrBA,kCAA+D;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,yBAAQ;MAAAA,iBAAS;;;MAjB1EA,eAA0B;MAA1BA,4CAA0B","names":["Validators","RegisterComponent","constructor","route","router","formBuilder","http","_snackBar","group","username","required","email","password","ngOnInit","queryParams","subscribe","params","registerToken","register","console","log","registerForm","getRawValue","requestBody","token","post","headers","next","data","navigate","error","open","message","duration","complete","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\doc_vs\\mean-project\\client\\src\\app\\pages\\register\\register.component.ts","D:\\doc_vs\\mean-project\\client\\src\\app\\pages\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n  registerToken : string | undefined\r\n  registerForm : FormGroup = this.formBuilder.group({\r\n    username: ['', Validators.required],\r\n    email: ['', Validators.required],\r\n    password: ['', Validators.required]\r\n  })\r\n\r\n  constructor(\r\n    private route : ActivatedRoute,\r\n    private router : Router,\r\n    private formBuilder : FormBuilder,\r\n    private http : HttpClient,\r\n    private _snackBar : MatSnackBar\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.queryParams.subscribe(params => {\r\n      this.registerToken = params['token']\r\n    })\r\n  }\r\n\r\n  register(){\r\n    console.log(this.registerForm.getRawValue())\r\n    const requestBody = this.registerForm.getRawValue()\r\n    let token = '' \r\n    if (this.registerToken){\r\n      token = `jwt ${this.registerToken}`\r\n    }\r\n    this.http.post('http://localhost:3000/user/register', requestBody, {\r\n      headers : {'authorization' : token}\r\n    }).subscribe({\r\n      next: (data) => {\r\n        this.router.navigate(['login'])\r\n      },\r\n      error: (error) => {\r\n        this._snackBar.open('Error', error.error.message, {\r\n          duration: 3000\r\n        })\r\n      },\r\n      complete: () => {}\r\n    })\r\n  }\r\n}\r\n","<div class=\"register-input-container\">\r\n    <form [formGroup]=\"registerForm\">\r\n        <mat-form-field>\r\n            <mat-label>username</mat-label>\r\n            <input matInput formControlName=\"username\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>email</mat-label>\r\n            <input matInput formControlName=\"email\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>password</mat-label>\r\n            <input matInput formControlName=\"password\">\r\n        </mat-form-field>\r\n    </form>\r\n    \r\n    <button mat-raised-button color=\"primary\" (click)=\"register()\">Register</button>\r\n\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}