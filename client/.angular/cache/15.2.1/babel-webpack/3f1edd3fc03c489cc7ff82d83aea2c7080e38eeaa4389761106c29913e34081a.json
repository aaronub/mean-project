{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/button\";\nexport class RegisterComponent {\n  constructor(route, router, formBuilder, http) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      console.log('1111: ', params['token']);\n      this.registerToken = params['token'];\n      console.log('register token: ', this.registerToken);\n    });\n  }\n  register() {\n    console.log(this.registerForm.getRawValue());\n    const requestBody = this.registerForm.getRawValue();\n    let token = '';\n    if (this.registerToken) {\n      token = `jwt ${this.registerToken}`;\n    }\n    this.http.post('http://localhost:3000/user/register', requestBody, {\n      headers: {\n        'authorization': token\n      }\n    }).subscribe(data => {\n      console.log(data);\n      this.router.navigate(['login']);\n    }, error => {\n      console.log('error', error);\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.HttpClient));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 15,\n  vars: 1,\n  consts: [[3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\")(2, \"mat-label\");\n      i0.ɵɵtext(3, \"username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-form-field\")(6, \"mat-label\");\n      i0.ɵɵtext(7, \"email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\")(10, \"mat-label\");\n      i0.ɵɵtext(11, \"password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_13_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵtext(14, \"Primary\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i4.MatFormField, i4.MatLabel, i5.MatInput, i6.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;AAQnE,OAAM,MAAOC,iBAAiB;EAQ5BC,YACUC,KAAsB,EACtBC,MAAe,EACfC,WAAyB,EACzBC,IAAiB;IAHjB,UAAK,GAALH,KAAK;IACL,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,SAAI,GAAJC,IAAI;IAVd,iBAAY,GAAe,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAChDC,QAAQ,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAChCE,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ;KACnC,CAAC;EAOG;EAELG,QAAQ;IACN,IAAI,CAACT,KAAK,CAACU,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACxCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC,OAAO,CAAC,CAAC;MACtC,IAAI,CAACG,aAAa,GAAGH,MAAM,CAAC,OAAO,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACC,aAAa,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAC,QAAQ;IACNH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACG,YAAY,CAACC,WAAW,EAAE,CAAC;IAE5C,MAAMC,WAAW,GAAG,IAAI,CAACF,YAAY,CAACC,WAAW,EAAE;IACnD,IAAIE,KAAK,GAAG,EAAE;IACd,IAAI,IAAI,CAACL,aAAa,EAAC;MACrBK,KAAK,GAAG,OAAO,IAAI,CAACL,aAAa,EAAE;;IAErC,IAAI,CAACZ,IAAI,CAACkB,IAAI,CAAC,qCAAqC,EAAEF,WAAW,EAAE;MACjEG,OAAO,EAAG;QAAC,eAAe,EAAGF;MAAK;KACnC,CAAC,CAACT,SAAS,CAAEY,IAAI,IAAI;MACpBV,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;MACjB,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,EAAGC,KAAK,IAAI;MACXZ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEW,KAAK,CAAC;IAC7B,CAAC,CAAC;EACJ;;AAvCW3B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV9BC,+BAAiC;MAEdA,wBAAQ;MAAAA,iBAAY;MAC/BA,2BAA4C;MAChDA,iBAAiB;MAEjBA,sCAAgB;MACDA,qBAAK;MAAAA,iBAAY;MAC5BA,2BAAwC;MAC5CA,iBAAiB;MAEjBA,sCAAgB;MACDA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA2C;MAC/CA,iBAAiB;MAGrBA,kCAA+D;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,wBAAO;MAAAA,iBAAS;;;MAjBzEA,4CAA0B","names":["Validators","RegisterComponent","constructor","route","router","formBuilder","http","group","username","required","email","password","ngOnInit","queryParams","subscribe","params","console","log","registerToken","register","registerForm","getRawValue","requestBody","token","post","headers","data","navigate","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\doc_vs\\mean-project\\client\\src\\app\\pages\\register\\register.component.ts","D:\\doc_vs\\mean-project\\client\\src\\app\\pages\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n  registerToken : string | undefined\r\n  registerForm : FormGroup = this.formBuilder.group({\r\n    username: ['', Validators.required],\r\n    email: ['', Validators.required],\r\n    password: ['', Validators.required]\r\n  })\r\n\r\n  constructor(\r\n    private route : ActivatedRoute,\r\n    private router : Router,\r\n    private formBuilder : FormBuilder,\r\n    private http : HttpClient\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.queryParams.subscribe(params => {\r\n      console.log('1111: ', params['token'])\r\n      this.registerToken = params['token']\r\n      console.log('register token: ', this.registerToken)\r\n    })\r\n  }\r\n\r\n  register(){\r\n    console.log(this.registerForm.getRawValue())\r\n\r\n    const requestBody = this.registerForm.getRawValue()\r\n    let token = '' \r\n    if (this.registerToken){\r\n      token = `jwt ${this.registerToken}`\r\n    }\r\n    this.http.post('http://localhost:3000/user/register', requestBody, {\r\n      headers : {'authorization' : token}\r\n    }).subscribe((data) => {\r\n      console.log(data)\r\n      this.router.navigate(['login'])\r\n    }, (error) => {\r\n      console.log('error', error)\r\n    })\r\n  }\r\n}\r\n","<form [formGroup]=\"registerForm\">\r\n    <mat-form-field>\r\n        <mat-label>username</mat-label>\r\n        <input matInput formControlName=\"username\" >\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field>\r\n        <mat-label>email</mat-label>\r\n        <input matInput formControlName=\"email\">\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field>\r\n        <mat-label>password</mat-label>\r\n        <input matInput formControlName=\"password\">\r\n    </mat-form-field>\r\n</form>\r\n\r\n<button mat-raised-button color=\"primary\" (click)=\"register()\">Primary</button>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}