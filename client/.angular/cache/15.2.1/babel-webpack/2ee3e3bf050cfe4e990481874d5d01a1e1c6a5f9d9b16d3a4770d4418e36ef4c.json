{"ast":null,"code":"import { ReportAction } from 'src/app/store/report/report.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport class ReportService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n    this.url = 'http://localhost:3000/user/';\n  }\n  getReports() {\n    this.http.get(this.url + 'reports').subscribe({\n      next: res => {\n        const reports = res.reports;\n        // console.log(reports);\n        this.store.dispatch(ReportAction.getReports({\n          reports\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n  getReport(id) {\n    this.http.get(this.url + 'report/' + id);\n  }\n  addReport(report) {\n    this.http.post(this.url + 'report', report).subscribe({\n      next: res => {\n        const report = res.report;\n        this.store.dispatch(ReportAction.addReport({\n          report\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n  updateReport(requestBody) {\n    this.http.put(this.url + 'report', requestBody).subscribe({\n      next: res => {\n        const report = res.report;\n        this.store.dispatch(ReportAction.updateReport({\n          report\n        }));\n      },\n      error: e => {\n        alert(e.error.message);\n      }\n    });\n  }\n}\nReportService.ɵfac = function ReportService_Factory(t) {\n  return new (t || ReportService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n};\nReportService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReportService,\n  factory: ReportService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,YAAY,QAAQ,oCAAoC;;;;AAKjE,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,IAAgB,EAAUC,KAAY;IAAtC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IAE3C,QAAG,GAAG,6BAA6B;EAFkB;EAI7DC,UAAU;IACR,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,SAAS,CAAC,CAChCC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMC,OAAO,GAAUD,GAAG,CAACC,OAAO;QAClC;QACA,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACZ,YAAY,CAACK,UAAU,CAAC;UAAEM;QAAO,CAAE,CAAC,CAAC;MAC3D,CAAC;MACDE,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;EAEAC,SAAS,CAACC,EAAU;IAClB,IAAI,CAACf,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,GAAG,GAAG,SAAS,GAAGW,EAAE,CAAC;EAClD;EAEAC,SAAS,CAACC,MAAc;IACtB,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC,IAAI,CAACd,GAAG,GAAG,QAAQ,EAAEa,MAAM,CAAC,CACxCZ,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMU,MAAM,GAAGV,GAAG,CAACU,MAAM;QACzB,IAAI,CAAChB,KAAK,CAACQ,QAAQ,CAACZ,YAAY,CAACmB,SAAS,CAAC;UAAEC;QAAM,CAAE,CAAC,CAAC;MACzD,CAAC;MACDP,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;EAEAM,YAAY,CAACC,WAAgB;IAC3B,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACjB,GAAG,GAAG,QAAQ,EAAEgB,WAAW,CAAC,CAC5Cf,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAI;QACjB,MAAMU,MAAM,GAAGV,GAAG,CAACU,MAAM;QACzB,IAAI,CAAChB,KAAK,CAACQ,QAAQ,CAACZ,YAAY,CAACsB,YAAY,CAAC;UAAEF;QAAM,CAAE,CAAC,CAAC;MAC5D,CAAC;MACDP,KAAK,EAAGC,CAAC,IAAI;QACXC,KAAK,CAACD,CAAC,CAACD,KAAK,CAACG,OAAO,CAAC;MACxB;KACD,CAAC;EACN;;AA/CWf,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAwB,SAAbxB,aAAa;EAAAyB,YAFZ;AAAM","names":["ReportAction","ReportService","constructor","http","store","getReports","get","url","subscribe","next","res","reports","dispatch","error","e","alert","message","getReport","id","addReport","report","post","updateReport","requestBody","put","factory","providedIn"],"sourceRoot":"","sources":["D:\\doc_vs\\mean-project\\client\\src\\app\\services\\report\\report.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Report } from 'src/app/interfaces/report';\r\nimport { ReportAction } from 'src/app/store/report/report.action';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReportService {\r\n  constructor(private http: HttpClient, private store: Store) {}\r\n\r\n  private url = 'http://localhost:3000/user/';\r\n\r\n  getReports(): void {\r\n    this.http.get(this.url + 'reports')\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const reports: any[] = res.reports;\r\n          // console.log(reports);\r\n          this.store.dispatch(ReportAction.getReports({ reports }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      });\r\n  }\r\n\r\n  getReport(id: string): void {\r\n    this.http.get<Report>(this.url + 'report/' + id);\r\n  }\r\n\r\n  addReport(report: Report): void {\r\n    this.http.post(this.url + 'report', report)\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const report = res.report;\r\n          this.store.dispatch(ReportAction.addReport({ report }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      });\r\n  }\r\n\r\n  updateReport(requestBody: any): void {\r\n    this.http.put(this.url + 'report', requestBody)\r\n      .subscribe({\r\n        next: (res: any) => {\r\n          const report = res.report;\r\n          this.store.dispatch(ReportAction.updateReport({ report }));\r\n        },\r\n        error: (e) => {\r\n          alert(e.error.message);\r\n        }\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}